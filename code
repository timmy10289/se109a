class Node:
    def __init__(self, value=None):
        self.value = value
        self.left_child = None #因為還沒有東西所以是None
        self.right_child = None #因為還沒有東西所以是None

class Binary_search_tree:
    def __init__(self):
        self.root = None #因為還沒有東西所以是None

    def insert(self, value):
        #判斷tree是否為空
        if self.root == None:
            self.root = Node(value)
        else:
            self._insert(value, self.root)# 如果tree不是空的,就呼叫  _insert()

    def _insert(self, value, cur_node):#cur_node 目前的數值
        if value < cur_node.value:  #當 value小於目前的node
            if cur_node.left_child == None: #如果目前的node「沒有」指向 left_child 的 pointer
                cur_node.left_child = Node(value)
            else:  #如果目前的node「沒有」指向 left_child 的 pointer
                self._insert(value, cur_node.left_child)  #我們會把 left_child 當成 cur_node 並重新呼叫 _insert()

        elif value > cur_node.value: #當 value大於目前的node
            if cur_node.right_child == None:  #如果目前的node「沒有」指向 right_child 的 pointer
                cur_node.right_child = Node(value) 
            else:   #如果目前的node「沒有」指向 right_child 的 pointer
                self._insert(value, cur_node.right_child)  #我們會把 right_child 當成 cur_node 並重新呼叫 _insert()

        # value == cur_node.value
        else:
            print("This value has existed")

    def print_tree(self):
        if self.root!=None:  #先檢查 self.root 是不是 Node
        	self._print_tree(self.root) #如果 self.root 有值,我們呼叫 _print_tree(self.root)

    def _print_tree(self,cur_node): #cur_node設為self.root
    	if cur_node!=None:
        	self._print_tree(cur_node.left_child)
        	print(str(cur_node.value))
        	self._print_tree(cur_node.right_child)


def fill_tree(tree, num_elems=10, max_int=50):
    from random import randint
    for _ in range(num_elems): #10個 value
        cur_elem = randint(0, max_int) #隨機0~50(不含50)的值
        tree.insert(cur_elem)
    return tree

tree = Binary_search_tree()
tree = fill_tree(tree)

tree.print_tree()
